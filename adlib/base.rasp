set example "^Hello, World!|Hello$____"
full seq display on

BOS = "^"; 
EOS = "$"; 
SEP = "|"; 
PAD = "_"; 

_k_is_BOS = select(tokens , BOS, ==   );
_k_is_EOS = select(tokens , EOS, ==   );
_k_is_SEP = select(tokens , SEP, ==   );
_k_is_PAD = select(tokens , PAD, ==   );
_q_is_BOS = select(BOS    , tokens, ==);
_q_is_EOS = select(EOS    , tokens, ==);
_q_is_SEP = select(SEP    , tokens, ==);
_q_is_PAD = select(PAD    , tokens, ==);

key_seq_mask   = not (_k_is_PAD or _k_is_EOS or _k_is_SEP or _k_is_BOS);
query_seq_mask = not (_q_is_PAD or _q_is_EOS or _q_is_SEP or _q_is_BOS);
seq_mask    = key_seq_mask and query_seq_mask;
seq_bitmask = indicator(not (tokens in [BOS, EOS, SEP, PAD])); #round(aggregate(seq_mask, 1));
is_special_token      = seq_bitmask;
ignore_special_tokens = seq_mask;

# IDK if it's better for the compiler to define these explicitly
# Or if I can define them in terms of each other
eq  = ignore_special_tokens and select(tokens, tokens, ==);
lt  = ignore_special_tokens and select(tokens, tokens, <);
gt  = ignore_special_tokens and select(tokens, tokens, >);
lte = ignore_special_tokens and select(tokens, tokens, <=);
gte = ignore_special_tokens and select(tokens, tokens, >=);

causal = ignore_special_tokens and select(indices, indices, <=);
diag   = ignore_special_tokens and select(indices, indices, ==);
before = ignore_special_tokens and select(indices, indices, <);
after  = ignore_special_tokens and select(indices, indices, >);

def checkerboard(offset) {
    black = select((indices + offset) % 2, (indices) % 2, ==) 
        and select((indices) % 2, (indices + offset) % 2, ==); 
    return ignore_special_tokens and black;
}

def index(seq, i) { 
  return aggregate(select(indices, i, ==), seq); 
}

def first(seq, char) {
  return aggregate(select_from_first(seq, char), indices);
}

BOS_IDX = first(tokens, BOS);
SEP_IDX = first(tokens, SEP);
EOS_IDX = first(tokens, EOS);

def max_val(seq){
    return index(sort(seq, -seq), 0);
}

def nonzero_elems(seq) {
    return sum(indicator(seq > 0));
}

def reciprocal(seq){
    _seq = seq if seq > 0 else 1;
    _seq = 1/_seq;
    _seq = _seq if seq > 0 else 0;
    return _seq;
}

def sum(seq) {
    return average(seq * length);
}

def nonzero_mean(seq) {
    return sum(seq)/nonzero_elems(seq);
}
nz_mean = nonzero_mean;

def nonzero_harmonic_mean(seq) {
    return reciprocal(nonzero_mean(reciprocal(seq)));
}
nz_harmonic_mean = nonzero_harmonic_mean;
